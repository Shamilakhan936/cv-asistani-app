generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?
  email               String?               @unique
  emailVerified       DateTime?             @map("email_verified")
  image               String?
  password            String?
  role                String                @default("USER")
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  clerk_id            String?               @unique
  accounts            Account[]
  carts               Cart[]
  optimizations       CvOptimization[]
  cvs                 CV[]
  emails              Email[]
  payments            Payment[]
  operations          PhotoOperation[]
  sessions            Session[]
  subscriptionHistory SubscriptionHistory[]
  subscriptions       UserSubscription[]

  @@map("users")
}

model UserSubscription {
  id                String             @id @default(cuid())
  userId            String             @db.Uuid
  plan              SubscriptionPlan
  type              SubscriptionType
  status            SubscriptionStatus
  startDate         DateTime
  endDate           DateTime?
  photoCredits      Int?
  poseCredits       Int?
  totalPhotoCredits Int?
  totalPoseCredits  Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, status])
  @@map("user_subscriptions")
}

model Cart {
  id          String     @id @default(cuid())
  userId      String     @db.Uuid
  status      String     @default("PENDING")
  totalAmount Float
  currency    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  items       CartItem[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id         String           @id @default(cuid())
  cartId     String
  plan       SubscriptionPlan
  type       SubscriptionType
  quantity   Int              @default(1)
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime         @default(now())
  cart       Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Payment {
  id         String   @id @default(cuid())
  userId     String   @db.Uuid
  cartId     String?
  amount     Float
  currency   String
  status     String
  provider   String
  providerId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CV {
  id            String           @id @default(cuid())
  title         String
  content       String
  published     Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  userId        String           @db.Uuid
  optimizations CvOptimization[]
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cvs")
}

model PhotoOperation {
  id         String   @id
  status     String   @default("PENDING")
  can_cancel Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    String   @db.Uuid
  notes      String?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  photos     Photo[]

  @@map("photo_operations")
}

model Photo {
  id           String         @id
  url          String
  type         String
  metadata     Json?          @default("{}")
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  operation_id String
  operation    PhotoOperation @relation(fields: [operation_id], references: [id], onDelete: Cascade)

  @@map("photos")
}

model CvOptimization {
  id        String   @id @default(cuid())
  cvId      String
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cv        CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cv_optimizations")
}

model SubscriptionHistory {
  id           String             @id @default(cuid())
  userId       String             @db.Uuid
  plan         SubscriptionPlan
  type         SubscriptionType
  status       SubscriptionStatus
  startDate    DateTime
  endDate      DateTime?
  photoCredits Int?
  poseCredits  Int?
  amount       Float
  currency     String
  createdAt    DateTime           @default(now())
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription_history")
}

model SubscriptionPricing {
  id           String           @id @default(cuid())
  plan         SubscriptionPlan
  type         SubscriptionType
  name         String
  description  String
  photoCredits Int?
  poseCredits  Int?
  durationDays Int?
  price        Float
  currency     String
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Settings {
  id                         Int      @id @default(1)
  cloudinaryCloudName        String?
  cloudinaryApiKey           String?
  cloudinaryUploadPresetCV   String?
  cloudinaryUploadPresetBlog String?
  replicateApiToken          String?
  googleClientId             String?
  googleClientSecret         String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model Email {
  id        String   @id @default(cuid())
  userId    String   @db.Uuid
  subject   String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("emails")
}

enum Role {
  USER
  ADMIN
  INACTIVE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  TRIAL
}

enum SubscriptionPlan {
  FREE
  PHOTO_BASIC
  PHOTO_STANDARD
  PHOTO_PREMIUM
  CV_WEEKLY
  CV_MONTHLY
  CV_QUARTERLY
}

enum SubscriptionType {
  PHOTO
  CV
}

enum OperationStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
  UPLOADING
  UPLOADED
}

enum PhotoType {
  ORIGINAL
  AI_GENERATED
}
